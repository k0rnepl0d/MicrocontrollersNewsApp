// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.mcnews.`data`.remote.dto

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ArticleDtoJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<ArticleDto>() {
  private val options: JsonReader.Options = JsonReader.Options.of("ArticleId", "Author", "Title",
      "Body", "Image", "Status", "Tags", "CreatedAt", "UpdatedAt")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "articleId")

  private val authorDtoAdapter: JsonAdapter<AuthorDto> = moshi.adapter(AuthorDto::class.java,
      emptySet(), "author")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "title")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "imageBase64")

  private val statusDtoAdapter: JsonAdapter<StatusDto> = moshi.adapter(StatusDto::class.java,
      emptySet(), "status")

  private val listOfTagDtoAdapter: JsonAdapter<List<TagDto>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, TagDto::class.java), emptySet(),
      "tags")

  public override fun toString(): String = buildString(32) {
      append("GeneratedJsonAdapter(").append("ArticleDto").append(')') }

  public override fun fromJson(reader: JsonReader): ArticleDto {
    var articleId: Int? = null
    var author: AuthorDto? = null
    var title: String? = null
    var body: String? = null
    var imageBase64: String? = null
    var status: StatusDto? = null
    var tags: List<TagDto>? = null
    var createdAt: String? = null
    var updatedAt: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> articleId = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("articleId",
            "ArticleId", reader)
        1 -> author = authorDtoAdapter.fromJson(reader) ?: throw Util.unexpectedNull("author",
            "Author", reader)
        2 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "Title",
            reader)
        3 -> body = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("body", "Body",
            reader)
        4 -> imageBase64 = nullableStringAdapter.fromJson(reader)
        5 -> status = statusDtoAdapter.fromJson(reader) ?: throw Util.unexpectedNull("status",
            "Status", reader)
        6 -> tags = listOfTagDtoAdapter.fromJson(reader) ?: throw Util.unexpectedNull("tags",
            "Tags", reader)
        7 -> createdAt = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("createdAt",
            "CreatedAt", reader)
        8 -> updatedAt = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return ArticleDto(
        articleId = articleId ?: throw Util.missingProperty("articleId", "ArticleId", reader),
        author = author ?: throw Util.missingProperty("author", "Author", reader),
        title = title ?: throw Util.missingProperty("title", "Title", reader),
        body = body ?: throw Util.missingProperty("body", "Body", reader),
        imageBase64 = imageBase64,
        status = status ?: throw Util.missingProperty("status", "Status", reader),
        tags = tags ?: throw Util.missingProperty("tags", "Tags", reader),
        createdAt = createdAt ?: throw Util.missingProperty("createdAt", "CreatedAt", reader),
        updatedAt = updatedAt
    )
  }

  public override fun toJson(writer: JsonWriter, value_: ArticleDto?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("ArticleId")
    intAdapter.toJson(writer, value_.articleId)
    writer.name("Author")
    authorDtoAdapter.toJson(writer, value_.author)
    writer.name("Title")
    stringAdapter.toJson(writer, value_.title)
    writer.name("Body")
    stringAdapter.toJson(writer, value_.body)
    writer.name("Image")
    nullableStringAdapter.toJson(writer, value_.imageBase64)
    writer.name("Status")
    statusDtoAdapter.toJson(writer, value_.status)
    writer.name("Tags")
    listOfTagDtoAdapter.toJson(writer, value_.tags)
    writer.name("CreatedAt")
    stringAdapter.toJson(writer, value_.createdAt)
    writer.name("UpdatedAt")
    nullableStringAdapter.toJson(writer, value_.updatedAt)
    writer.endObject()
  }
}
