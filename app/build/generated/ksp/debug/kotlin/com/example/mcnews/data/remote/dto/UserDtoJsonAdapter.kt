// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.mcnews.`data`.remote.dto

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class UserDtoJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<UserDto>() {
  private val options: JsonReader.Options = JsonReader.Options.of("UserId", "Login", "FirstName",
      "LastName")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "userId")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "login")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "firstName")

  public override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("UserDto").append(')') }

  public override fun fromJson(reader: JsonReader): UserDto {
    var userId: Int? = null
    var login: String? = null
    var firstName: String? = null
    var lastName: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> userId = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("userId", "UserId",
            reader)
        1 -> login = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("login", "Login",
            reader)
        2 -> firstName = nullableStringAdapter.fromJson(reader)
        3 -> lastName = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return UserDto(
        userId = userId ?: throw Util.missingProperty("userId", "UserId", reader),
        login = login ?: throw Util.missingProperty("login", "Login", reader),
        firstName = firstName,
        lastName = lastName
    )
  }

  public override fun toJson(writer: JsonWriter, value_: UserDto?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("UserId")
    intAdapter.toJson(writer, value_.userId)
    writer.name("Login")
    stringAdapter.toJson(writer, value_.login)
    writer.name("FirstName")
    nullableStringAdapter.toJson(writer, value_.firstName)
    writer.name("LastName")
    nullableStringAdapter.toJson(writer, value_.lastName)
    writer.endObject()
  }
}
